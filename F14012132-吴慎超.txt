/******StringStack******/ 
public class StringStack 
{    
String string=¡°¡±£»    
public String push(String string)
{       
this.string+=string£»       
return this.string£»    
}    
public char pop£¨£©{        
char a = 0;
try{          
a=string.charAt(string.length()-1);
string=string.substring(0,string.length()-1);          
} 
catch (Exception e){            
System.out.println(e);            
} 
 return a;        
}    
}    
/******StringStackTest******/    
import static org.junit.Assert.*;
import org.junit.Test;        
@author Milo
    
public class StringStackTest{
    
@test 
   
public void shouldPopZYXWhenPushXYZ()
{           
StringStack actual=new StringStack();
    /******Assert******/     
assertEquals('X',actual.push(X));     
assertEquals('XY',actual.push(Y));     
assertEquals('XYZ',actual.push(Z));          
assertEquals('Z',actual.pop());     
assertEquals('Y',actual.pop());     
assertEquals('X',actual.pop());     
}    
}     
/******StringStack********/ 
public class StringStack { 	
String string=""; 	
public String push(String string){ 		
this.string+=string; 		
return this.string; 	
} 	
public char pop() 
{ 		
char c = 0; 		
try { 			
c=string.charAt(string.length()-1); 			
string=string.substring(0, string.length()-1);                 
}                 
catch (Exception e) 
{ 			
System.out.println(e); 		
} 		
return c; 	
} 
}
 /**********StringStackTest**************/ 
import static org.junit.Assert.*; 
import org.junit.Test;  	
@author Milo
       
public class StringStackTest 
{
	
@Test
 	
public void shouldPopZYXWhenPushXYZ()
{ 		
StringStack actual=new StringStack(); 
/***********Assert**********/ 		
assertEquals('X', actual.push(X)); 		
assertEquals('XY', actual.push(Y)); 		
assertEquals('XYZ', actual.push(Z));  		
assertEquals('Z', actual.pop()); 		
assertEquals('Y', actual.pop()); 		
assertEquals('X', actual.pop()); 	
} 
}
